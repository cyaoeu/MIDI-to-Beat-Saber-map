desc:MIDIbeat visualization
//author: Henrik Berglund (cyaoeu) - credits to Olivier Belanger for MIDI code (CookDSP functions)

filename:0,MIDIbeat_visualization_blue.png
filename:1,MIDIbeat_visualization_red.png
filename:2,MIDIbeat_visualization_arrow_blue.png
filename:3,MIDIbeat_visualization_ball_blue.png
filename:4,MIDIbeat_visualization_arrow_red.png
filename:5,MIDIbeat_visualization_ball_red.png
filename:6,MIDIbeat_visualization_obstacle_wall.png
filename:7,MIDIbeat_visualization_obstacle_ceiling.png
filename:8,MIDIbeat_visualization_mine.png

@init

tmp = -1;

image1 = file_open(0);
image2 = file_open(1);
image3 = file_open(2);
image4 = file_open(3);
image5 = file_open(4);
image6 = file_open(5);
image7 = file_open(6);
image8 = file_open(7);
image9 = file_open(8);

note1 = 6700;
note2 = 6750;
note3 = 6800;
note4 = 6850;
note5 = 6900;
note6 = 6950;
note7 = 7000;
note8 = 7050;
note9 = 7100;


function confirmpitch(note1, note2, note3, note4, note5, note6, note7, note8, note9, start, end)
(
(note1[0] >= start && note1[0] <= end) ? returnpitch = note1 :
(note2[0] >= start && note2[0] <= end) ? returnpitch = note2 :
(note3[0] >= start && note3[0] <= end) ? returnpitch = note3 :
(note4[0] >= start && note4[0] <= end) ? returnpitch = note4 :
(note5[0] >= start && note5[0] <= end) ? returnpitch = note5 :
(note6[0] >= start && note6[0] <= end) ? returnpitch = note6 :
(note7[0] >= start && note7[0] <= end) ? returnpitch = note7 :
(note8[0] >= start && note8[0] <= end) ? returnpitch = note8 :
(note9[0] >= start && note9[0] <= end) ? returnpitch = note9 
);


function memalloc(size)
(
    __memory_index = __memory_next + 8;
    __memory_next = __memory_index + size;
    memset(__memory_index, 0.0, size);
    __memory_index;
);
function notein()
(
    this.ok = this.channel = this.pitch = this.velocity = 0;
    ret = midirecv(offset, msg1, msg2, msg3);
    ret ? (
        // Retrieve midi note messages
        (msg1 & 0xF0) == 0x90 || (msg1 & 0xF0) == 0x80 ? (
            this.ok = 1;
            this.channel = (msg1 & 0x0F) + 1;
            this.pitch = msg2;
            this.velocity = msg3;
        ) : (
            // Passthrough other events
            midisend(offset,msg1,msg2,msg3);
        );
    );
    ret;
);

function memalloc(size, noreinit)
(
    noreinit == 0 ? (
        __memory_index = __memory_next + 8;
        __memory_next = __memory_index + size;
        memset(__memory_index, 0.0, size);
    ) : (
        __memory_index = __memory_next + 8;
        __memory_next = __memory_index + size;
    );
    __memory_index;
);

function poly(voices stealing)
(
    this.voices = voices;
    this.stealing = stealing;
    this.pitches = memalloc(this.voices);
    this.indexes = memalloc(this.voices);
    this.icount = 0;
    this.voice = this.pitch = this.velocity = -1;
    memset(this.pitches, -1, this.voices);
);

function poly(voices)
(
    this.poly(voices, 0);
);

function poly_do(pitch velocity channel)
(
    this.pitch = pitch; 
    this.velocity = velocity;
    this.channel = channel;
    this.voice = -1;
    k_ = 0;
    found_ = 0;
    velocity > 0 ? (
        while (k_ < this.voices && found_ == 0) (
            this.pitches[k_] == -1 ? (
                this.voice = k_;
                this.pitches[k_] = pitch;
                found_ = 1;
                this.indexes[this.icount] = k_;
                this.icount = (this.icount + 1) % this.voices;
            );
            k_ += 1;
        );
        found_ == 0 && this.stealing ? (
            k_ = this.indexes[this.icount];
            this.voice = k_;
            this.pitches[k_] = pitch;
            this.icount = (this.icount + 1) % this.voices;            
        );
    ) : (
        while (k_ < this.voices && found_ == 0) (
            this.pitches[k_] == pitch ? (
                this.voice = k_;
                this.pitches[k_] = -1;
                found_ = 1;
            ); 
            k_ += 1;
        );
    );
);

p.poly(8);


function note(color, note, direction)
(
  color == "mine_blue" ? (
    gfx_x = blue_x_final;
    gfx_y = 70 + blue_y_final; 
    gfx_blit(8, 1, 0);
  );
  
  color == "mine_red" ? (
      gfx_x = red_x_final;
      gfx_y = 70 + red_y_final; 
      gfx_blit(8, 1, 0);
    );
  
  color == "red" ? (
  
    gfx_x = red_x_final;
    gfx_y = 70 + red_y_final;
    
    gfx_blit(1, 1, 0);
    direction == 0 ? gfx_blit(4, 1, 3.1415926536) :
    direction == 1 ? gfx_blit(4, 1, 0) :
    direction == 2 ? gfx_blit(4, 1, 1.5707963268) :
    direction == 3 ? gfx_blit(4, 1, 4.7123889804) :
    direction == 4 ? gfx_blit(4, 1, 5.4977871438) :
    direction == 5 ? gfx_blit(4, 1, 0.7853981634) :
    direction == 6 ? gfx_blit(4, 1, 3.926990817) :
    direction == 7 ? gfx_blit(4, 1, 2.3561944902) :
    direction == 8 ? gfx_blit(5, 1, 0);
    loop(7,
      gfx_muladdrect(red_x_final,70 + red_y_final, 75,75, gfx_r*=0.999, gfx_g*=0.999, gfx_b*=0.999, 1, 0, 0, 0); 
  
  );
  );
  color == "blue" ? (
     
      gfx_x = blue_x_final;
      gfx_y = 70 + blue_y_final; 
      gfx_blit(0, 1, 0);
           
      direction == 0 ? gfx_blit(2, 1, 3.1415926536) :
      direction == 1 ? gfx_blit(2, 1, 0) :
      direction == 2 ? gfx_blit(2, 1, 1.5707963268) :
      direction == 3 ? gfx_blit(2, 1, 4.7123889804) :
      direction == 4 ? gfx_blit(2, 1, 5.4977871438) :
      direction == 5 ? gfx_blit(2, 1, 0.7853981634) :
      direction == 6 ? gfx_blit(2, 1, 3.926990817) :
      direction == 7 ? gfx_blit(2, 1, 2.3561944902) :
      direction == 8 ? gfx_blit(3, 1, 0);
      loop(7,
       gfx_muladdrect(blue_x_final, 70 + blue_y_final, 75,75, gfx_r*=0.999, gfx_g*=0.999, gfx_b*=0.999, 1, 0, 0, 0); 
       ); 
      );
    );

noteOn = $x90;

blue_n = 200;
blue_n[0] = 96;
blue_n[1] = 97;
blue_n[2] = 98;
blue_n[3] = 99;
blue_n[4] = 100;
blue_n[5] = 101;
blue_n[6] = 102;
blue_n[7] = 103;
blue_n[8] = 104;
blue_n[9] = 105;
blue_n[10] = 106;

blue_saber_start = 96;
blue_saber_end = 106;
 
blue_x_note = 1200;
blue_x_note[0] = 200;
blue_x_note[1] = 200;
blue_x_note[2] = 300;
blue_x_note[3] = 300;
blue_x_note[4] = 0;
blue_x_note[5] = 300;
blue_x_note[6] = 300;
blue_x_note[7] = 300;
blue_x_note[8] = 200;
blue_x_note[9] = 200;
blue_x_note[10] = 200;
blue_y_note[11] = 10000;

blue_y_note = 1500;
blue_y_note[0] = 200;
blue_y_note[1] = 200;
blue_y_note[2] = 200;
blue_y_note[3] = 200;
blue_y_note[4] = 200;
blue_y_note[5] = 100;
blue_y_note[6] = 200;
blue_y_note[7] = 0;
blue_y_note[8] = 200;
blue_y_note[9] = 200;
blue_y_note[10] = 200;
blue_y_note[11] = 10000;

blue_cut_direction = 1700;
blue_cut_direction[0] = 1;
blue_cut_direction[1] = 0;
blue_cut_direction[2] = 1;
blue_cut_direction[3] = 0;
blue_cut_direction[4] = 3;
blue_cut_direction[5] = 2;
blue_cut_direction[6] = 7;
blue_cut_direction[7] = 8;
blue_cut_direction[8] = 1;
blue_cut_direction[9] = 1;
blue_cut_direction[10] = 1;

red_n = 700;
red_n[0] = 108;
red_n[1] = 109;
red_n[2] = 110;
red_n[3] = 111;
red_n[4] = 112;
red_n[5] = 113;
red_n[6] = 114;
red_n[7] = 115;
red_n[8] = 116;
red_n[9] = 117;
red_n[10] = 118;

red_saber_start = 108;
red_saber_end = 118;

red_x_note = 2200;
red_x_note[0] = 100;
red_x_note[1] = 100;
red_x_note[2] = 0;
red_x_note[3] = 0;
red_x_note[4] = 0;
red_x_note[5] = 300;
red_x_note[6] = 0;
red_x_note[7] = 0;
red_x_note[8] = 100;
red_x_note[9] = 100;
red_x_note[10] = 100;
red_x_note[11] = 10000;

red_y_note = 2500;
red_y_note[0] = 200;
red_y_note[1] = 200;
red_y_note[2] = 200;
red_y_note[3] = 200;
red_y_note[4] = 100;
red_y_note[5] = 200;
red_y_note[6] = 200;
red_y_note[7] = 0;
red_y_note[8] = 200;
red_y_note[9] = 200;
red_y_note[10] = 200;
red_y_note[11] = 10000;

red_cut_direction = 2700;
red_cut_direction[0] = 1;
red_cut_direction[1] = 0;
red_cut_direction[2] = 1;
red_cut_direction[3] = 0;
red_cut_direction[4] = 3;
red_cut_direction[5] = 2;
red_cut_direction[6] = 6;
red_cut_direction[7] = 8;
red_cut_direction[8] = 1;
red_cut_direction[9] = 1;
red_cut_direction[10] = 1;

obstacle_n = 5500;
obstacle_n[0] = 89;
obstacle_n[1] = 90;
obstacle_n[2] = 91;
obstacle_n[3] = 92;
obstacle_n[4] = 93;

obstacle_start = 89;
obstacle_end = 93;

wall = 12345;

w = 75; h = 75;
w2 = 75; h2 = 75;
v = 6000;
u = 7000;


@block
// Until all midi events have been processed
while (n.notein()) (
// If midi event is a midi note
  n.ok ? (
    p.poly_do(n.pitch, n.velocity, n.channel);
    // If a voice has been assigned
    /*
    q = 0;
    loop(9, 
      p.voice == q ? (
        noteq
    );
    */

       
      p.voice == 0 ? (
          note1[0] = p.pitch;
          note1[1] = p.channel;
          note1[2] = p.velocity;
          note1[2] == 0 ? (
          confirmpitch(note1, note2, note3, note4, note5, note6, note7, note8, note9, obstacle_start, obstacle_end) ? (
            o = 0;
            loop(5,
              returnpitch[0] == obstacle_n[o] ? (
                wall[o] = 0;
              ) : o+= 1;
            );
          );
        note1[0] = -1; note1[1] = -1; note1[2] = -1;
      )     
                 
    ) : p.voice == 1 ? (
          note2[0] = p.pitch;
          note2[1] = p.channel;
          note2[2] = p.velocity;
          note2[2] == 0 ? (
          confirmpitch(note1, note2, note3, note4, note5, note6, note7, note8, note9, obstacle_start, obstacle_end) ? (
            o = 0;
            loop(5,
              returnpitch[0] == obstacle_n[o] ? (
                wall[o] = 0;
              ) : o+= 1;
            );
          );
        note2[0] = -1; note2[1] = -1; note2[2] = -1;
      )
          
    ) : p.voice == 2 ? (
          note3[0] = p.pitch;
          note3[1] = p.channel;
          note3[2] = p.velocity;
          note3[2] == 0 ? (
          confirmpitch(note1, note2, note3, note4, note5, note6, note7, note8, note9, obstacle_start, obstacle_end) ? (
            o = 0;
            loop(5,                                              
              returnpitch[0] == obstacle_n[o] ? (
                wall[o] = 0;
              ) : o+= 1;
            );
          );
        note3[0] = -1; note3[1] = -1; note3[2] = -1;
      )
    
    ) : p.voice == 4 ? ( //??? possible bug in CookDSP
          note4[0] = p.pitch;
          note4[1] = p.channel;
          note4[2] = p.velocity;
          note4[2] == 0 ? (
          confirmpitch(note1, note2, note3, note4, note5, note6, note7, note8, note9, obstacle_start, obstacle_end) ? (
            o = 0;
            loop(5,                                              
              returnpitch[0] == obstacle_n[o] ? (
                wall[o] = 0;
              ) : o+= 1;
            );
          );
       note4[0] = -1; note4[1] = -1; note4[2] = -1;
      )
     ) : p.voice == 5 ? ( //??? possible bug in CookDSP
                note5[0] = p.pitch;
                note5[1] = p.channel;
                note5[2] = p.velocity;
                note5[2] == 0 ? (
                confirmpitch(note1, note2, note3, note4, note5, note6, note7, note8, note9, obstacle_start, obstacle_end) ? (
                  o = 0;
                  loop(5,                                              
                    returnpitch[0] == obstacle_n[o] ? (
                      wall[o] = 0;
                    ) : o+= 1;
                  );
                );
             note5[0] = -1; note5[1] = -1; note5[2] = -1;
            )
    );

  confirmpitch(note1, note2, note3, note4, note5, note6, note7, note8, note9, blue_saber_start, blue_saber_end) ? (
    u = 0;
    bluenote = returnpitch;
    loop(11,
      bluenote[0] == blue_n[u] ? (
        blue_x_final = blue_x_note[u];
        blue_y_final = blue_y_note[u];
        blue_notecut_direction = blue_cut_direction[u];
        gfx_r = 1; gfx_g = 1; gfx_b =1;
      ) : u+= 1;
    );
  ) : (
      a = 666;
      );
      
  confirmpitch(note1, note2, note3, note4, note5, note6, note7, note8, note9, red_saber_start, red_saber_end) ? (
    v = 0;
    rednote = returnpitch;
    loop(11,
      rednote[0] == red_n[v] ? (
        red_x_final = red_x_note[v];
        red_y_final = red_y_note[v];
        red_notecut_direction = red_cut_direction[v];
        gfx_r = 1; gfx_g = 1; gfx_b =1;
      ) : v+= 1;
    );
  ) : (
        b = 666;
      );
          
  ///*
  confirmpitch(note1, note2, note3, note4, note5, note6, note7, note8, note9, obstacle_start, obstacle_end) ? (
    o = 0;
    loop(5,
      returnpitch[0] == obstacle_n[o] ? (
        wall[o] = 1;
          ) : o+= 1;        
        );
      );
  confirmpitch(note9, note8, note7, note6, note5, note4, note3, note2, note1, obstacle_start, obstacle_end) ? ( //why write good code if you can write hacks instead
    o = 0;
    loop(5,
      returnpitch[0] == obstacle_n[o] ? (
        wall[o] = 1;
          ) : o+= 1;        
        );
      );
      //*/
    );
  );

  


@gfx
wall[0] == 1 ? (
gfx_x = 300;
gfx_y = 50; 
gfx_blit(6, 1, 0);
);
wall[1] == 1 ? (
gfx_x = 200;
gfx_y = 50; 
gfx_blit(6, 1, 0);
);
wall[2] == 1 ? (
gfx_x = 100;
gfx_y = 50; 
gfx_blit(6, 1, 0);
);
wall[3] == 1 ? (
gfx_x = 0;
gfx_y = 50; 
gfx_blit(6, 1, 0);
);
wall[4] == 1 ? (
gfx_x = 10;
gfx_y = 50; 
gfx_blit(7, 1, 0);
);; 

gfx_gradrect(0,250,400,500, 0,0,0,0, 0, 0, 0, 0, .8/250, .8/250, .8/250, 1/250, 0);

y_o2 = 70;
gfx_w = 400; gfx_h = 500;
a = 0;
y = 50;
x = 0;

//gfx_x = 200;
//gfx_y = 20;
gfx_a = 1;

  msg2 != 0 ? (
      
    confirmpitch(note1, note2, note3, note4, note5, note6, note7, note8, note9, blue_saber_start, blue_saber_end) ? (
    bluenote = returnpitch;    
    bluenote[1] == 10 ? (
      note("blue", bluenote, blue_notecut_direction); 
    ) : bluenote[1] == 11 ? (
      note("mine_blue", bluenote, 0);
    ) : bluenote[1] <= 9 ? ( 
      note("blue", bluenote, bluenote[1]);
      );
    );
    
    confirmpitch(note1, note2, note3, note4, note5, note6, note7, note8, note9, red_saber_start, red_saber_end) ? (
    rednote = returnpitch;
    rednote[1] == 10 ? (
      note("red", rednote, red_notecut_direction); 
    ) : rednote[1] == 11 ? (
      note("mine_red", rednote, 0);
    ) : rednote[1] <= 9 ? (  
      note("red", rednote, rednote[1]);
    );
  );
);
 

@sample
spl0=spl0;
spl1=spl1;

