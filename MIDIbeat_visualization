desc:MIDIbeat visualization
//author: Henrik Berglund (cyaoeu) - credits to Phillip Cartwright for MIDI sorting code 

filename:0,MIDIbeat_visualization_blue.png
filename:1,MIDIbeat_visualization_red.png
filename:2,MIDIbeat_visualization_arrow.png
filename:3,MIDIbeat_visualization_ball.png

@init

tmp = -1;
image1 = file_open(0);
image2 = file_open(1);
image3 = file_open(2);
image4 = file_open(3);

activeNotes = 1000;
activeVel = 2000;
activeCh = 3000;
activeNotes[-1] = -1;
activeVel[-1] = -1;
countNotes = 0; 

function confirmpitch(note1, note2, note3, note4, start, end)
(
(note1 >= start && note1 <= end) ? returnpitch = note1 :
(note2 >= start && note2 <= end) ? returnpitch = note2 :
(note3 >= start && note3 <= end) ? returnpitch = note3 :
(note4 >= start && note4 <= end) ? returnpitch = note4);

function wallnoteoff(note)
(
  wall[note] = 0;
);

function memalloc(size)
(
    __memory_index = __memory_next + 8;
    __memory_next = __memory_index + size;
    memset(__memory_index, 0.0, size);
    __memory_index;
);
function notein()
(
    this.ok = this.channel = this.pitch = this.velocity = 0;
    ret = midirecv(offset, msg1, msg2, msg3);
    ret ? (
        // Retrieve midi note messages
        (msg1 & 0xF0) == 0x90 || (msg1 & 0xF0) == 0x80 ? (
            this.ok = 1;
            this.channel = (msg1 & 0x0F) + 1;
            this.pitch = msg2;
            this.velocity = msg3;
        ) : (
            // Passthrough other events
            midisend(offset,msg1,msg2,msg3);
        );
    );
    ret;
);

function memalloc(size, noreinit)
(
    noreinit == 0 ? (
        __memory_index = __memory_next + 8;
        __memory_next = __memory_index + size;
        memset(__memory_index, 0.0, size);
    ) : (
        __memory_index = __memory_next + 8;
        __memory_next = __memory_index + size;
    );
    __memory_index;
);

function poly(voices stealing)
(
    this.voices = voices;
    this.stealing = stealing;
    this.pitches = memalloc(this.voices);
    this.indexes = memalloc(this.voices);
    this.icount = 0;
    this.voice = this.pitch = this.velocity = -1;
    memset(this.pitches, -1, this.voices);
);

function poly(voices)
(
    this.poly(voices, 0);
);

function poly_do(pitch velocity channel)
(
    this.pitch = pitch; 
    this.velocity = velocity;
    this.channel = channel;
    this.voice = -1;
    k_ = 0;
    found_ = 0;
    velocity > 0 ? (
        while (k_ < this.voices && found_ == 0) (
            this.pitches[k_] == -1 ? (
                this.voice = k_;
                this.pitches[k_] = pitch;
                found_ = 1;
                this.indexes[this.icount] = k_;
                this.icount = (this.icount + 1) % this.voices;
            );
            k_ += 1;
        );
        found_ == 0 && this.stealing ? (
            k_ = this.indexes[this.icount];
            this.voice = k_;
            this.pitches[k_] = pitch;
            this.icount = (this.icount + 1) % this.voices;            
        );
    ) : (
        while (k_ < this.voices && found_ == 0) (
            this.pitches[k_] == pitch ? (
                this.voice = k_;
                this.pitches[k_] = -1;
                found_ = 1;
            ); 
            k_ += 1;
        );
    );
);

p.poly(4, 0);


function note(color, note, direction)
(
  color == "red" ? (
  
    gfx_x = 0;
    gfx_y = 20;
    debugstring = "red";
    
    gfx_x = red_x_final;
    gfx_y = 70 + red_y_final;
    
    gfx_blit(1, 1, 0);
    direction == 0 ? gfx_blit(2, 1, 3.1415926536) :
    direction == 1 ? gfx_blit(2, 1, 0) :
    direction == 2 ? gfx_blit(2, 1, 1.5707963268) :
    direction == 3 ? gfx_blit(2, 1, 4.7123889804) :
    direction == 4 ? gfx_blit(2, 1, 5.4977871438) :
    direction == 5 ? gfx_blit(2, 1, 0.7853981634) :
    direction == 6 ? gfx_blit(2, 1, 3.926990817) :
    direction == 7 ? gfx_blit(2, 1, 2.3561944902) :
    direction == 8 ? gfx_blit(3, 1, 0);
    loop(10,
      gfx_muladdrect(red_x_final,70 + red_y_final, 75,75, gfx_r*=0.999, gfx_g*=0.999, gfx_b*=0.999, 1, 0, 0, 0); 
  
  );
  );
  color == "blue" ? (
    
      gfx_x = 200;
      gfx_y = 20;
      debugstring = "blue";
        
      gfx_x = blue_x_final;
      gfx_y = 70 + blue_y_final; 
      gfx_blit(0, 1, 0);
           
      direction == 0 ? gfx_blit(2, 1, 3.1415926536) :
      direction == 1 ? gfx_blit(2, 1, 0) :
      direction == 2 ? gfx_blit(2, 1, 1.5707963268) :
      direction == 3 ? gfx_blit(2, 1, 4.7123889804) :
      direction == 4 ? gfx_blit(2, 1, 5.4977871438) :
      direction == 5 ? gfx_blit(2, 1, 0.7853981634) :
      direction == 6 ? gfx_blit(2, 1, 3.926990817) :
      direction == 7 ? gfx_blit(2, 1, 2.3561944902) :
      direction == 8 ? gfx_blit(3, 1, 0);
      loop(10,
       gfx_muladdrect(blue_x_final, 70 + blue_y_final, 75,75, gfx_r*=0.999, gfx_g*=0.999, gfx_b*=0.999, 1, 0, 0, 0); 
       ); 
      );
    );
  


        


function deg(deg)
     (
       degrees = deg * (3.1459/180);
       degrees;
);
/*
function SortNotes() local (i j)
(
    swap = 0;
    i = 0;
    while (i <= countNotes)(
        activeNotes[i] < activeNotes[i+1] ? (
            tmp = activeNotes[i];
            activeNotes[i] = activeNotes[i+1];
            activeNotes[i+1] = tmp;
            tmp = activeVel[i];
            activeVel[i] = activeVel[i+1];
            activeVel[i+1] = tmp;
            tmp = activeCh[i];
            activeCh[i] = activeCh[i+1];
            activeCh[i+1] = tmp;            i = 0;
            swap = 1;
        );
        swap == 0 ? i += 1;
        swap = 0;
    );
);

function GetNote()
(
    hNote = activeNotes[0];
    hVel = activeVel[0];
    lNote = activeNotes[countNotes-1];
    lVel = activeVel[countNotes-1];
    priority == 0 ? aNote = activeNotes[voice] : aNote = activeNotes[countNotes - voice - 1];
    priority == 0 ? aVel = activeVel[voice] : aVel = activeVel[countNotes - voice - 1];
    priority == 0 ? aCh = activeCh[voice] : aCh = activeCh[countNotes - voice - 1];
    priority == 0 ? nNote = activeNotes[voice + 1] : nNote = activeNotes[countNotes - voice - 2];
    priority == 0 ? nVel = activeVel[voice + 1] : nVel = activeVel[countNotes - voice - 2];
    priority == 0 ? nCh = activeCh[voice + 1] : nCh = activeCh[countNotes - voice - 2];
    
    aNote == -1 ? (
        altPriority == 0 ? (
          aNote = hNote;
          aVel = hVel;
          aCh = hCh;
        ) : altPriority == 1 ? (
          aNote = lNote;
          aVel = lVel;
          aCh = lCh;
        ) : altPriority == 2 ? (
          aNote = nNote;
          aVel = nVel;
          aCh = nCh;
        ) : altPriority == 3 ? (
          aNote = -1;
          aVel = -1;
          aCh = -1;
        );
    );
);

function AddNote(msg1, msg2, msg3) local (i j swap)
(
    i = 0;
    j = 0;
    while ((j == 0) && (i <= countNotes)) (
        activeNotes[i] == -1 ? (
            j = 1;
            activeNotes[i] = msg2;
            activeVel[i] = max(msg3,1);
            activeCh[i] = msg1 & 0x0F;               
        ): i += 1;
    );
);

function RemoveNote(msg2) local (i j)
(
    i = 0;
    loop(128,
     activeNotes[i] == msg2 ? (
      activeNotes[i] = -1;
      activeVel[i] = -1;
      activeCh[i] = -1;
     );
     i += 1;
    );
);

i = 0;
loop(128,
    activeNotes[i] = -1;
    activeVel[i] = -1;
    activeCh[i] = -1;
    i += 1;
);
*/

noteOn = $x90;
noteon_cnt = 0;
size = 2;
blue_n = 200;
blue_n[0] = 96;
blue_n[1] = 97;
blue_n[2] = 98;
blue_n[3] = 99;
blue_n[4] = 100;
blue_n[5] = 101;
blue_n[6] = 102;
blue_n[7] = 103;
blue_n[8] = 104;
blue_n[9] = 105;
blue_n[10] = 106;

blue_saber_start = 96;
blue_saber_end = 106;
 
blue_x_note = 1200;
blue_x_note[0] = 200;
blue_x_note[1] = 200;
blue_x_note[2] = 300;
blue_x_note[3] = 300;
blue_x_note[4] = 0;
blue_x_note[5] = 300;
blue_x_note[6] = 300;
blue_x_note[7] = 300;
blue_x_note[8] = 200;
blue_x_note[9] = 200;
blue_x_note[10] = 200;
blue_y_note[11] = 10000;

blue_y_note = 1500;
blue_y_note[0] = 200;
blue_y_note[1] = 200;
blue_y_note[2] = 200;
blue_y_note[3] = 200;
blue_y_note[4] = 200;
blue_y_note[5] = 100;
blue_y_note[6] = 200;
blue_y_note[7] = 0;
blue_y_note[8] = 200;
blue_y_note[9] = 200;
blue_y_note[10] = 200;
blue_y_note[11] = 10000;

blue_cut_direction = 1700;
blue_cut_direction[0] = 1;
blue_cut_direction[1] = 0;
blue_cut_direction[2] = 1;
blue_cut_direction[3] = 0;
blue_cut_direction[4] = 3;
blue_cut_direction[5] = 2;
blue_cut_direction[6] = 7;
blue_cut_direction[7] = 8;
blue_cut_direction[8] = 1;
blue_cut_direction[9] = 1;
blue_cut_direction[10] = 1;

red_n = 700;
red_n[0] = 108;
red_n[1] = 109;
red_n[2] = 110;
red_n[3] = 111;
red_n[4] = 112;
red_n[5] = 113;
red_n[6] = 114;
red_n[7] = 115;
red_n[8] = 116;
red_n[9] = 117;
red_n[10] = 118;

red_saber_start = 108;
red_saber_end = 118;

red_x_note = 2200;
red_x_note[0] = 100;
red_x_note[1] = 100;
red_x_note[2] = 0;
red_x_note[3] = 0;
red_x_note[4] = 0;
red_x_note[5] = 300;
red_x_note[6] = 0;
red_x_note[7] = 0;
red_x_note[8] = 100;
red_x_note[9] = 100;
red_x_note[10] = 100;
red_x_note[11] = 10000;

red_y_note = 2500;
red_y_note[0] = 200;
red_y_note[1] = 200;
red_y_note[2] = 200;
red_y_note[3] = 200;
red_y_note[4] = 100;
red_y_note[5] = 200;
red_y_note[6] = 200;
red_y_note[7] = 0;
red_y_note[8] = 200;
red_y_note[9] = 200;
red_y_note[10] = 200;
red_y_note[11] = 10000;

red_cut_direction = 2700;
red_cut_direction[0] = 1;
red_cut_direction[1] = 0;
red_cut_direction[2] = 1;
red_cut_direction[3] = 0;
red_cut_direction[4] = 3;
red_cut_direction[5] = 2;
red_cut_direction[6] = 6;
red_cut_direction[7] = 8;
red_cut_direction[8] = 1;
red_cut_direction[9] = 1;
red_cut_direction[10] = 1;

obstacle_n = 5500;
obstacle_n[0] = 89;
obstacle_n[1] = 90;
obstacle_n[2] = 91;
obstacle_n[3] = 92;
obstacle_n[4] = 93;

obstacle_start = 89;
obstacle_end = 93;

wall = 12345;

w = 75; h = 75;
w2 = 75; h2 = 75;
v = 6000;
u = 7000;

@slider
something=slider1*srate;

@block
    // Until all midi events have been processed
    while (n.notein()) (
        // If midi event is a midi note
        n.ok ? (
            p.poly_do(n.pitch, n.velocity, n.channel);
            // If a voice has been assigned
            p.voice != -1 ? (
               
                p.voice == 0 ? (
                   n1pitch = p.pitch;
                   n1channel = p.channel; 
                   n1velocity = p.velocity;  
                   n1velocity == 0 ? (
                   confirmpitch(n1pitch, n2pitch, n3pitch, n4pitch, obstacle_start, obstacle_end) ? (
                                   o = 0;
                                   loop(5,
                                   
                                   returnpitch == obstacle_n[o] ? (
                                   wall[o] = 0;
                                   ) : o+= 1;
                                   );
                                   );
                   n1pitch = -1; n1channel = -1; n1velocity = -1;

                   )            
                ) : p.voice == 1 ? (
                   n2pitch = p.pitch; 
                   n2channel = p.channel;
                   n2velocity = p.velocity;
                   n2velocity == 0 ? (
                   confirmpitch(n1pitch, n2pitch, n3pitch, n4pitch, obstacle_start, obstacle_end) ? (
                                   o = 0;
                                   loop(5,
                                   
                                   returnpitch == obstacle_n[o] ? (
                                   wall[o] = 0;
                                   ) : o+= 1;
                                   );
                                   );
                   n2pitch = -1; n2channel = -1; n2velocity = -1;
                   )
                ) : p.voice == 2 ? (
                    n3pitch = p.pitch;
                    n3channel = p.channel;
                    n3velocity = p.velocity;
                    n3velocity == 0 ? (
                    confirmpitch(n1pitch, n2pitch, n3pitch, n4pitch, obstacle_start, obstacle_end) ? (
                                                       o = 0;
                                                       loop(5,
                                                       
                                                       returnpitch == obstacle_n[o] ? (
                                                       wall[o] = 0;
                                                       ) : o+= 1;
                                                       );
                                                       );
                    n3pitch = -1; n3channel = -1; n3velocity = -1;
                    )
                );
                confirmpitch(n1pitch, n2pitch, n3pitch, n4pitch, blue_saber_start, blue_saber_end) ? (
                u = 0;
                loop(11,
                  returnpitch == blue_n[u] ? (
                    blue_x_final = blue_x_note[u];
                    blue_y_final = blue_y_note[u];
                    blue_notecut_direction = blue_cut_direction[u];
                    gfx_r = 1; gfx_g = 1; gfx_b =1;
                    ) : u+= 1;
                  );
                ) : (
                a = 666;
                );
                confirmpitch(n1pitch, n2pitch, n3pitch, n4pitch, red_saber_start, red_saber_end) ? (
                v = 0;
                loop(11,
                  returnpitch == red_n[v] ? (
                    red_x_final = red_x_note[v];
                    red_y_final = red_y_note[v];
                    red_notecut_direction = red_cut_direction[v];
                    gfx_r = 1; gfx_g = 1; gfx_b =1;
                    ) : v+= 1;
                  );
                ) : (
                b = 666;
                );
                
                confirmpitch(n1pitch, n2pitch, n3pitch, n4pitch, obstacle_start, obstacle_end) ? (
                o = 0;
                loop(5,
                
                returnpitch == obstacle_n[o] ? (
                wall[o] = 1;
                ) : o+= 1;
                  );
                  );
                );
              );
                       //debug2("countnotes 2 call");
   );
  
               
    


                
/*
while (midirecv(ts,msg1,msg2,msg3)) (
    midi_bus == bus ? (
        midi_bus = bus;
        // if note on
        ((msg1 & 0xF0) == 0x90) && (msg3 > 0) ? (
          _test = 1;
          oNote = aNote;
          oCh = aCh;
          countNotes += 1;
          AddNote(msg1, msg2, msg3);
          SortNotes();
          GetNote();
          (aNote != oNote) ? (
              _test = 3;
              // send note on to new note
              midisend(ts,0x90+aCh,aNote,aVel);
              oNote != -1 ? (
                // send note off to old note
                midisend(ts,0x80+oCh,oNote,msg3);
              );
            );  

                   
        // if note off  
        ) : (((msg1 & 0xF0) == 0x90) && (msg3 == 0)) ||
          ((msg1 & 0xF0) == 0x80) ? (
          _test = 2;
          //midisend(ts,msg1,msg2,msg3);
          oNote = aNote;
          oCh = aCh;
          countNotes -= 1;
          RemoveNote(msg2);
          SortNotes();
          GetNote();
           
          
          //aNote | hNote | iNote | oNote == obstacle_n[0] ? wall1 = 1;
  
          //(iNote == obstacle_n[p] ? (wall1  = 1) :
          //(oNote == obstacle_n[p] ? (wall1 = 1) ;

          (aNote != oNote)? (
              _test = 4;

            );      
        ) : midisend(ts,msg1,msg2,msg3);
    ) : midisend(ts,msg1,msg2,msg3);
    

    countNotes == 4 ? (
    //debug2("countnotes 2 call");
     u = 0;
     loop(11,
       nNote == blue_n[u] ? (
         blue_x_final = blue_x_note[u];
         blue_y_final = blue_y_note[u];
         blue_notecut_direction = blue_cut_direction[u];
         gfx_r = 1; gfx_g = 1; gfx_b =1;
         ) : u+= 1;
       );
      
      
      
   v = 0;  
    loop(11,
        aNote == red_n[v] ? (
          red_x_final = red_x_note[v];
         red_y_final = red_y_note[v];
          red_notecut_direction = red_cut_direction[v];
          gfx_r = 1; gfx_g = 1; gfx_b =1;
          ) : v+= 1;
        );
       
    );
      
      
        
   
    countNotes == 3 ? (
    //debug2("countnotes 2 call");
     u = 0;
     loop(11,
       nNote == blue_n[u] ? (
         blue_x_final = blue_x_note[u];
         blue_y_final = blue_y_note[u];
         blue_notecut_direction = blue_cut_direction[u];
         gfx_r = 1; gfx_g = 1; gfx_b =1;
         ) : u+= 1;
       );
      
      
      
   v = 0;  
    loop(11,
        aNote == red_n[v] ? (
          red_x_final = red_x_note[v];
         red_y_final = red_y_note[v];
          red_notecut_direction = red_cut_direction[v];
          gfx_r = 1; gfx_g = 1; gfx_b =1;
          ) : v+= 1;
        );
       
    );
      
      
      
    countNotes == 2 ? (
    //debug2("countnotes 2 call");
    nNote >= obstacle_start && nNote <= obstacle_end ? (
     u = 0;
     loop(11,
       aNote == blue_n[u] ? (
         blue_x_final = blue_x_note[u];
         blue_y_final = blue_y_note[u];
         blue_notecut_direction = blue_cut_direction[u];
         gfx_r = 1; gfx_g = 1; gfx_b =1;
         ) : u+= 1;
       );
      );
      
      
   v = 0;  
    loop(11,
        aNote == red_n[v] ? (
          red_x_final = red_x_note[v];
         red_y_final = red_y_note[v];
          red_notecut_direction = red_cut_direction[v];
          gfx_r = 1; gfx_g = 1; gfx_b =1;
          ) : v+= 1;
        );
       
    );
        
        countNotes == 1 ? (
        //debug2("countnotes 1 call");
         

    u = 0;
    v = 0;  
    loop(11,
    activenotes[0] == blue_n[u] ? (
    blue_x_final = blue_x_note[u];
    blue_y_final = blue_y_note[u];
    blue_notecut_direction = blue_cut_direction[u];
    gfx_r = 1; gfx_g = 1; gfx_b =1;
    ) : u2+= 1;
    activenotes[0] == red_n[v] ? (
    red_x_final = red_x_note[v];
    red_y_final = red_y_note[v];
    red_notecut_direction = red_cut_direction[v];
    gfx_r = 1; gfx_g = 1; gfx_b =1;
    ) : v2+= 1;
  );       
  );     
        
);
/*
                
                 
       
      

 

@gfx
/*gfx_x = 200;
gfx_y = 120;
gfx_drawnumber(n.pitch,2);
*/

gfx_loadimg(0, image1);
gfx_loadimg(1, image2);
gfx_loadimg(2, image3);
gfx_loadimg(3, image4);
wall[0] == 1 ? gfx_muladdrect(0,100,80,300, 0, 0, 0, 0, .1, 0, 0, 0); 
wall[1] == 1 ? gfx_muladdrect(100,100,80,300, 0, 0, 0, 0, .1, 0, 0, 0); 
wall[2] == 1 ? gfx_muladdrect(200,100,80,300, 0, 0, 0, 0, .1, 0, 0, 0); 
wall[3] == 1 ? gfx_muladdrect(300,100,80,300, 0, 0, 0, 0, .1, 0, 0, 0); 
wall[4] == 1 ? gfx_muladdrect(0,10,380,80, 0, 0, 0, 0, .1, 0, 0, 0); 

gfx_gradrect(0,250,400,500, 0,0,0,0, 0, 0, 0, 0, .8/250, .8/250, .8/250, 1/250, 0);

y_o2 = 70;
gfx_w = 400; gfx_h = 500;
a = 0;
y = 50;
x = 0;

//gfx_x = 200;
//gfx_y = 20;
gfx_a = 1;

  msg2 != 0 ? (  
    confirmpitch(n1pitch, n2pitch, n3pitch, n4pitch, blue_saber_start, blue_saber_end) ? (
    note("blue", n3pitch , blue_notecut_direction); 
    );
    confirmpitch(n1pitch, n2pitch, n3pitch, n4pitch, red_saber_start, red_saber_end) ? (
    note("red", n2pitch , red_notecut_direction); 
    );
      /*countNotes == 4 ? (
        lNote >= obstacle_start && lNote <= obstacle_end ? ( 
        lNote == obstacle_n[0] ? wall1 = 1 :
        lNote == obstacle_n[1] ? wall2 = 1 :
        lNote == obstacle_n[2] ? wall3 = 1 :
        lNote == obstacle_n[3] ? wall4 = 1 : 
        lNote == obstacle_n[4] ? wall5 = 1;
        );
      */
);
 
 

@sample
spl0=spl0;
spl1=spl1;

