desc:MIDIbeat visualization
//author: Henrik Berglund (cyaoeu) - credits to Olivier Belanger for MIDI code (CookDSP functions)

filename:0,MIDIbeat_visualization_blue.png
filename:1,MIDIbeat_visualization_red.png
filename:2,MIDIbeat_visualization_arrow_blue.png
filename:3,MIDIbeat_visualization_ball_blue.png
filename:4,MIDIbeat_visualization_arrow_red.png
filename:5,MIDIbeat_visualization_ball_red.png
filename:6,MIDIbeat_visualization_obstacle_wall.png
filename:7,MIDIbeat_visualization_obstacle_ceiling.png
filename:8,MIDIbeat_visualization_mine.png

@init

//init note json

cut_up = 0;
cut_down = 1;
cut_left = 2;
cut_right = 3;
cut_upleft = 4;
cut_upright = 5;
cut_downleft = 6;
cut_downright = 7;
cut_any = 8;

layer_bot = 200;
layer_mid = 100;
layer_top = 0;

line_left = 0;
line_midleft = 100;
line_midright = 200;
line_right = 300;



//flash - set to 0 to disable note flash
flash = 1;

//FAVORITES HERE
blue_n = 200;
blue_saber_start = 96;
blue_saber_end = 107;
blue_x_note = 1200;
blue_y_note = 1500;
blue_cut_direction = 1700;
blue_n[0] = 96;
blue_x_note[0] = line_midright;
blue_y_note[0] = layer_bot;
blue_cut_direction[0] = cut_down;
blue_n[1] = 97;
blue_x_note[1] = line_right;
blue_y_note[1] = layer_bot;
blue_cut_direction[1] = cut_down;
blue_n[2] = 98;
blue_x_note[2] = line_midright;
blue_y_note[2] = layer_bot;
blue_cut_direction[2] = cut_up;
blue_n[3] = 99;
blue_x_note[3] = line_right;
blue_y_note[3] = layer_bot;
blue_cut_direction[3] = cut_up;
blue_n[4] = 100;
blue_x_note[4] = line_midright;
blue_y_note[4] = layer_mid;
blue_cut_direction[4] = cut_right;
blue_n[5] = 101;
blue_x_note[5] = line_right;
blue_y_note[5] = layer_mid;
blue_cut_direction[5] = cut_right;
blue_n[6] = 102;
blue_x_note[6] = line_left;
blue_y_note[6] = layer_bot;
blue_cut_direction[6] = cut_left;
blue_n[7] = 103;
blue_x_note[7] = line_left;
blue_y_note[7] = layer_mid;
blue_cut_direction[7] = cut_left;
blue_n[8] = 104;
blue_x_note[8] = line_midright;
blue_y_note[8] = layer_top;
blue_cut_direction[8] = cut_any;
blue_n[9] = 105;
blue_x_note[9] = line_right;
blue_y_note[9] = layer_top;
blue_cut_direction[9] = cut_any;
blue_n[10] = 106;
blue_x_note[10] = line_midleft;
blue_y_note[10] = layer_mid;
blue_cut_direction[10] = cut_any;
blue_n[11] = 107;
blue_x_note[11] = line_midleft;
blue_y_note[11] = layer_bot;
blue_cut_direction[11] = cut_any;
red_n = 700;
red_saber_start = 108;
red_saber_end = 119;
red_x_note = 2200;
red_y_note = 2500;
red_cut_direction = 2700;
red_n[0] = 108;
red_x_note[0] = line_midleft;
red_y_note[0] = layer_bot;
red_cut_direction[0] = cut_down;
red_n[1] = 109;
red_x_note[1] = line_left;
red_y_note[1] = layer_bot;
red_cut_direction[1] = cut_down;
red_n[2] = 110;
red_x_note[2] = line_midleft;
red_y_note[2] = layer_bot;
red_cut_direction[2] = cut_up;
red_n[3] = 111;
red_x_note[3] = line_left;
red_y_note[3] = layer_bot;
red_cut_direction[3] = cut_up;
red_n[4] = 112;
red_x_note[4] = line_midleft;
red_y_note[4] = layer_mid;
red_cut_direction[4] = cut_left;
red_n[5] = 113;
red_x_note[5] = line_left;
red_y_note[5] = layer_mid;
red_cut_direction[5] = cut_left;
red_n[6] = 114;
red_x_note[6] = line_right;
red_y_note[6] = layer_bot;
red_cut_direction[6] = cut_right;
red_n[7] = 115;
red_x_note[7] = line_right;
red_y_note[7] = layer_mid;
red_cut_direction[7] = cut_right;
red_n[8] = 116;
red_x_note[8] = line_midleft;
red_y_note[8] = layer_top;
red_cut_direction[8] = cut_any;
red_n[9] = 117;
red_x_note[9] = line_left;
red_y_note[9] = layer_top;
red_cut_direction[9] = cut_any;
red_n[10] = 118;
red_x_note[10] = line_midright;
red_y_note[10] = layer_mid;
red_cut_direction[10] = cut_any;
red_n[11] = 119;
red_x_note[11] = line_midright;
red_y_note[11] = layer_bot;
red_cut_direction[11] = cut_any;

//FAVORITES END


tmp = -1;

image1 = file_open(0);
image2 = file_open(1);
image3 = file_open(2);
image4 = file_open(3);
image5 = file_open(4);
image6 = file_open(5);
image7 = file_open(6);
image8 = file_open(7);
image9 = file_open(8);

qfx_note[0] = 6750;
qfx_note[1] = 6800;
qfx_note[2] = 6850;
qfx_note[3] = 6900;
qfx_note[4] = 6950;
qfx_note[5] = 7000;
qfx_note[6] = 7050;
qfx_note[7] = 7100;
qfx_note[8] = 7150;

qfx_note[0] = 9750;
qfx_note[1] = 9800;
qfx_note[2] = 9850;
qfx_note[3] = 9900;
qfx_note[4] = 9950;
qfx_note[5] = 10000;
qfx_note[6] = 10050;
qfx_note[7] = 10100;
qfx_note[8] = 10150;

q2 = 14000;
q3 = 16000;
q4 = 18000;
q5 = 20000;

z = 22000;




numberdraw = 10300;


function confirmnote(note, start, end)
(
note >= start && note <= end ? 1 : 0;
);

function confirmmine(note, channel, start, end)
(
(note >= start && note <= end) && (channel == 11) ? 1 : 0;
);

function memalloc(size)
(
    __memory_index = __memory_next + 8;
    __memory_next = __memory_index + size;
    memset(__memory_index, 0.0, size);
    __memory_index;
);
function notein()
(
    this.ok = this.channel = this.pitch = this.velocity = 0;
    ret = midirecv(offset, msg1, msg2, msg3);
    ret ? (
        // Retrieve midi note messages
        (msg1 & 0xF0) == 0x90 || (msg1 & 0xF0) == 0x80 ? (
            this.ok = 1;
            this.channel = (msg1 & 0x0F);
            this.pitch = msg2;
            this.velocity = msg3;
        ) : (
            // Passthrough other events
            midisend(offset,msg1,msg2,msg3);
        );
    );
    ret;
);

function memalloc(size, noreinit)
(
    noreinit == 0 ? (
        __memory_index = __memory_next + 8;
        __memory_next = __memory_index + size;
        memset(__memory_index, 0.0, size);
    ) : (
        __memory_index = __memory_next + 8;
        __memory_next = __memory_index + size;
    );
    __memory_index;
);

function poly(voices stealing)
(
    this.voices = voices;
    this.stealing = stealing;
    this.pitches = memalloc(this.voices);
    this.indexes = memalloc(this.voices);
    this.icount = 0;
    this.voice = this.pitch = this.velocity = -1;
    memset(this.pitches, -1, this.voices);
);

function poly(voices)
(
    this.poly(voices, 0);
);

function poly_do(pitch velocity channel)
(
    this.pitch = pitch; 
    this.velocity = velocity;
    this.channel = channel;
    this.voice = -1;
    k_ = 0;
    found_ = 0;
    velocity > 0 ? (
        while (k_ < this.voices && found_ == 0) (
            this.pitches[k_] == -1 ? (
                this.voice = k_;
                this.pitches[k_] = pitch;
                found_ = 1;
                this.indexes[this.icount] = k_;
                this.icount = (this.icount + 1) % this.voices;
            );
            k_ += 1;
        );
        found_ == 0 && this.stealing ? (
            k_ = this.indexes[this.icount];
            this.voice = k_;
            this.pitches[k_] = pitch;
            this.icount = (this.icount + 1) % this.voices;            
        );
    ) : (
        while (k_ < this.voices && found_ == 0) (
            this.pitches[k_] == pitch ? (
                this.voice = k_;
                this.pitches[k_] = -1;
                found_ = 1;
            ); 
            k_ += 1;
        );
    );
);

p.poly(8);

function wall(inputnote, onoroff)
(
  onoroff == "on" ? (
    inputnote[0] == obstacle_n[0] ? wall[0] = 1 :
     inputnote[0] == obstacle_n[1] ? wall[1] = 1 :
     inputnote[0] == obstacle_n[2] ? wall[2] = 1 :
     inputnote[0] == obstacle_n[3] ? wall[3] = 1 :
     inputnote[0] == obstacle_n[4] ? wall[4] = 1;
    ) : (
    inputnote[0] == obstacle_n[0] ? wall[0] = 0 :
    inputnote[0] == obstacle_n[1] ? wall[1] = 0 :
    inputnote[0] == obstacle_n[2] ? wall[2] = 0 :
    inputnote[0] == obstacle_n[3] ? wall[3] = 0 :
    inputnote[0] == obstacle_n[4] ? wall[4] = 0; 
  );
);

function note(color, inputnote, direction)
(
  color == "mine_blue" ? (
  gfx_x = inputnote[3];
  gfx_y = 70 + inputnote[4];
    gfx_blit(8, 1, 0);
  );
  
  color == "mine_red" ? (
      gfx_x = inputnote[3];
      gfx_y = 70 + inputnote[4]; 
      gfx_blit(8, 1, 0);
    );
  
  color == "red" ? (
    gfx_x = inputnote[3];
    gfx_y = 70 + inputnote[4]; 
    gfx_blit(1, 1, 0);
    direction == 0 ? gfx_blit(4, 1, 0) :
    direction == 1 ? gfx_blit(4, 1, 3.1415926536) :
    direction == 2 ? gfx_blit(4, 1, 1.5707963268) :
    direction == 3 ? gfx_blit(4, 1, 4.7123889804) :
    direction == 4 ? gfx_blit(4, 1, 5.4977871438) :
    direction == 5 ? gfx_blit(4, 1, 0.7853981634) :
    direction == 6 ? gfx_blit(4, 1, 3.926990817) :
    direction == 7 ? gfx_blit(4, 1, 2.3561944902) :
    direction == 8 ? gfx_blit(5, 1, 0);
  
    
    
  );
  color == "blue" ? (
     ///*
      gfx_x = inputnote[3];
      gfx_y = 70 + inputnote[4]; 
      //*/
      //gfx_x = 300; gfx_y = 300;
      gfx_blit(0, 1, 0);
           
      direction == 0 ? gfx_blit(2, 1, 0) :
      direction == 1 ? gfx_blit(2, 1, 3.1415926536) :
      direction == 2 ? gfx_blit(2, 1, 1.5707963268) :
      direction == 3 ? gfx_blit(2, 1, 4.7123889804) :
      direction == 4 ? gfx_blit(2, 1, 5.4977871438) :
      direction == 5 ? gfx_blit(2, 1, 0.7853981634) :
      direction == 6 ? gfx_blit(2, 1, 3.926990817) :
      direction == 7 ? gfx_blit(2, 1, 2.3561944902) :
      direction == 8 ? gfx_blit(3, 1, 0);
      
      
      
      
      );
    );

noteOn = $x90;

obstacle_n = 5500;
obstacle_n[0] = 89;
obstacle_n[1] = 90;
obstacle_n[2] = 91;
obstacle_n[3] = 92;
obstacle_n[4] = 93;

obstacle_start = 89;
obstacle_end = 93;

wall = 12345;

w = 75; h = 75;
w2 = 75; h2 = 75;
v = 6000;
u = 7000;


@block
// Until all midi events have been processed
while (n.notein()) (
// If midi event is a midi note
  n.ok ? (
    p.poly_do(n.pitch, n.velocity, n.channel);
    //n.velocity > 0 ? gfx_r = 1; gfx_g = 1; gfx_b =1 ;
    //n.velocity == 0 ? gfx_r = 0; gfx_g = 0; gfx_b = 0;
    i = 0;
    loop(8, 
      p.voice == i ? ( 
      
        note[i][0] = p.pitch;
        note[i][1] = p.channel;
        note[i][2] = p.velocity;
        note[i][2] > 0 ? (gfx_r = 1; gfx_g = 1; gfx_b = 1);
        

        loop(8,   
          u = 0; 
               loop(12,
                confirmnote(note[i][0], blue_saber_start, blue_saber_end) == 1 ? (
                 note[i][0] == blue_n[u] ? (
        
                   note[i][3] = blue_x_note[u];
                   note[i][4] = blue_y_note[u];
                   note[i][5] = blue_cut_direction[u];
                   
                   note[i][2] == 0 ? note[i][0] = -1;
                   
        
                 );
                 u+= 1;
               );
              );
                 
            v = 0;
            loop(12,
            confirmnote(note[i][0], red_saber_start, red_saber_end) == 1 ? (
              note[i][0] == red_n[v] ? (        
                note[i][3] = red_x_note[v];
                note[i][4] = red_y_note[v];
                note[i][5] = red_cut_direction[v];
                
                note[i][2] == 0 ? note[i][0] = -1;

              
         
              );
               v+= 1;
            );
            );
            
            q = 0;
            loop(5,
            confirmnote(note[i][0], obstacle_start, obstacle_end) == 1 ? (
              note[i][0] == obstacle_n[q] ? (        
                //note[i][2] == 0 ? note[i][0] = -1;
                note[i][2] == 0 ? wall(note[i], "off");
                );
                
            
            
               q+= 1;
            );
            
            );
        
          
         );               
      );
i += 1;
        
        
                
      
      );
      );
    );
      
 
            


  


@gfx
gfx_x = 100;
gfx_y = 50; 
gfx_drawstr(stringdraw, 2);

drawy = 0;
debug = 0;
loop(8,
  gfx_x = 100;
  gfx_y = 80 + 20*drawy; 
  debug == 1 ? gfx_drawnumber(numberdraw[drawy], 2);
  drawy += 1;
);


wall[0] == 1 ? (
gfx_x = 300;
gfx_y = 50; 
gfx_blit(6, 1, 0);
);
wall[1] == 1 ? (
gfx_x = 200;
gfx_y = 50; 
gfx_blit(6, 1, 0);
);
wall[2] == 1 ? (
gfx_x = 100;
gfx_y = 50; 
gfx_blit(6, 1, 0);
);
wall[3] == 1 ? (
gfx_x = 0;
gfx_y = 50; 
gfx_blit(6, 1, 0);
);
wall[4] == 1 ? (
gfx_x = 10;
gfx_y = 50; 
gfx_blit(7, 1, 0);
);; 

gfx_gradrect(0,250,400,500, 0,0,0,0, 0, 0, 0, 0, .8/250, .8/250, .8/250, 1/250, 0);

y_o2 = 70;
gfx_w = 400; gfx_h = 500;
a = 0;
y = 50;
x = 0;

gfx_a = 1;

msg2 != 0 ? (
  
  
  
  
  z = 0;        
  loop(8,
    qfx_note[z][0] = note[z][0]; 
    qfx_note[z][1] = note[z][1]; 
    qfx_note[z][2] = note[z][2]; 
    z += 1;
    
  );
    
  
  q2 = 0;
  loop(8,
  //pitch
  //numberdraw[q2] = gfx_note[q2][0];
  
  //channel
  //numberdraw[q2] = gfx_note[q2][1];
  
  //velocity
  numberdraw[q2] = gfx_note[q2][2];
  
  //x
  //numberdraw[q2] = gfx_note[q2][3];
  
  //y
  //numberdraw[q2] = gfx_note[q2][4];
    
    confirmnote(gfx_note[q2][0], blue_saber_start, blue_saber_end) == 1 ? (
      gfx_note[q2][1] == 10 ? (
        note("mine_blue", gfx_note[q2], 0);
          ) :
  
      gfx_note[q2][1] == 9 ? (
        note("blue", gfx_note[q2], gfx_note[q2][5]); 
          ) : 
  
      gfx_note[q2][1] <= 8 ? (
        note("blue", gfx_note[q2], gfx_note[q2][1]);
          );
    flash == 1 ? (
      
      loop(12,
        gfx_muladdrect(gfx_note[q2][3], 70 + gfx_note[q2][4], 75,75, gfx_r*=0.999, gfx_g*=0.999, gfx_b*=0.999, 1, 0, 0, 0); 
      );
      

      );
        );
    q2 += 1; 
    );
  
  q3 = 0;
  loop(8,
  //numberdraw[q3] = gfx_note[q3][0];
  
    confirmnote(gfx_note[q3][0], red_saber_start, red_saber_end) == 1 ? (
  
      gfx_note[q3][1] == 10 ? (
        note("mine_red", gfx_note[q3], 0);
        ) :
    
      gfx_note[q3][1] == 9 ? (
        note("red", gfx_note[q3], gfx_note[q3][5]); 
        ) : 
      
      gfx_note[q3][1] <= 8 ? (  
        note("red", gfx_note[q3], gfx_note[q3][1]);
        );  
        flash == 1 ? (
    loop(12,
      gfx_muladdrect(gfx_note[q3][3], 70 + gfx_note[q3][4], 75,75, gfx_r*=0.999, gfx_g*=0.999, gfx_b*=0.999, 1, 0, 0, 0); 
    );
    

            );
      );
    q3 += 1;
    ); 
  q6 = 0;
  loop(8, 
    confirmnote(gfx_note[q6][0], obstacle_start, obstacle_end) == 1 ? (
      gfx_note[q6][2] > 0 ? wall(gfx_note[q6], "on");
      ;
    );
    q6 += 1;
  
  q4 = 0;
  loop(8,
    confirmmine(gfx_note[q4][0], gfx_note[q4][1], blue_saber_start, blue_saber_end) == 1 ? (
      note("mine_blue", gfx_note[q4], 0);
      );
  
    q4 += 1;
    );
  
  q5 = 0;
  loop(8, 
    confirmmine(gfx_note[q5][0], gfx_note[q5][1], red_saber_start, red_saber_end) == 1 ? (
      note("mine_red", gfx_note[q5], 0);
      ); 
  
    q5 += 1;
  
    );

  
    );
    
    
    );
    

   
@sample
spl0=spl0;
spl1=spl1;

/////////////////////////////////////////////////////////////////
// Copyright (c) - 2014 - Olivier Belanger                     //
// Permission to use, copy, modify, and/or distribute this     //
// software for any purpose with or without fee is hereby      //
// granted, provided that the above copyright notice and this  //
// permission notice appear in all copies. CookDSP IS PROVIDED //
// "AS IS", WITHOUT WARRANTY OF ANY KIND FROM THE AUTHOR.      //
/////////////////////////////////////////////////////////////////

